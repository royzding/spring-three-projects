1. download kafka:

wget https://archive.apache.org/dist/kafka/2.6.0/kafka_2.13-2.8.0.tgz
tar -xzf kafka_2.13-2.8.0.tgz

---------it works on windows-----------------

a. installation:

C:\Applications\kafka_2.13-2.8.0\kafka-info\kafka_2.13-2.8.0.tar
extract above tar files.

then change in zookeeper.properties
dataDir=C:/Applications/kafka_2.13-2.8.0

then change in server.properties
log.dirs=C:/Applications/kafka_2.13-2.8.0/kafka-logs

b. start the kafka:

C:\Applications\kafka_2.13-2.8.0

.\bin\windows\zookeeper-server-start.bat .\config\zookeeper.properties
.\bin\windows\zookeeper-server-stop.bat .\config\zookeeper.properties

.\bin\windows\kafka-server-start.bat .\config\server.properties
.\bin\windows\kafka-server-stop.bat .\config\server.properties

.\bin\windows\kafka-topics.bat --create --bootstrap-server localhost:9092 --topic quickstart-events

.\bin\windows\kafka-topics.bat --bootstrap-server localhost:9092 --list

.\bin\windows\kafka-topics.bat --bootstrap-server localhost:9092 --delete --topic topic-01

on Windows:

netstat -ano | findstr :<PORT>
taskkill /PID <PID> /F

netstat -ano | findstr :9092

debug:
if kafka-server-start failed deleting the logs in the log folder. (rm -r *)


---------does not work on windows apps-----------------

2. Start the Kafka cluster on linux (ubuntu)

Run the following command to start ZooKeeper:

$ bin/zookeeper-server-start.sh config/zookeeper.properties
$ bin/zookeeper-server-stop.sh config/zookeeper.properties

There will be a lot of output, and ZooKeeper will be ready in a short time, typically around a second or two.

Open another terminal session. Change the directory to the kafka directory, and start the Kafka broker:

$ cd kafka_2.13-2.6.0
$ bin/kafka-server-start.sh config/server.properties

$ bin/kafka-server-stop.sh config/server.properties


3. Produce and consume some messages
Open another terminal session and run the kafka-topics command to create a Kafka topic named quickstart-events:

3.1 create a topic:

$ cd kafka_2.13-2.6.0
$ bin/kafka-topics.sh --create --bootstrap-server localhost:9092 --topic quickstart-events
$ bin/kafka-topics.sh --create --bootstrap-server localhost:9092 --replication-factor 1  --partitions 1 --topic Hello-Kafka

3.2 list the topics created:

$ bin/kafka-topics.sh --bootstrap-server localhost:9092 --list

$ bin/kafka-topics.sh --bootstrap-server localhost:9092 --delete --topic Hello-Kafka 

3.3 create producer and consumer:

$ bin/kafka-console-producer.sh --topic quckstart-events --bootstrap-server localhost:9092

$ bin/kafka-console-consumer.sh --topic quckstart-events --from-beginning --bootstrap-server localhost:9092



4. Stop Kafka
When youâ€™re done experimenting with Kafka, follow these steps to exit the Kafka environment:

Stop the consumer and producer clients with Ctrl+C
Stop the Kafka broker with Ctrl+C
Stop the ZooKeeper server with Ctrl+C
Run the following command to clean up:
rm -rf /tmp/kafka-logs /tmp/zookeeper

on Linux:
To list any process listening to the port 8080:
$ lsof -i:8080

To kill any process listening to the port 8080:
$ kill $(lsof -t -i:8080)
$ kill -9 $(lsof -t -i:8080)


***docker image files

%localappdata%\Docker\wsl

5. Start the Kafka cluster on Docker

Before you get started, here's the Docker Compose file for the tutorial:

docker-compose.yml

services:
  broker:
    image: apache/kafka:latest
    hostname: broker
    container_name: broker
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:29093
      KAFKA_LISTENERS: PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
	  
	  

***Running Kafka on Docker from Ubuntu console

To run Kafka on Docker, first confirm your Docker Desktop is running. Then execute the following command from the kafka-on-docker directory:

$docker compose up -d

The -d flag runs the docker container in detached mode which is similar to running Unix commands in the background by appending &. To confirm the container is running, run this command:

$docker logs broker

And if everything is running ok you'll see something like this at this at the end of screen output:

[2024-05-21 17:30:58,752] INFO Awaiting socket connections on broker:29092. (kafka.network.DataPlaneAcceptor)
[2024-05-21 17:30:58,754] INFO Awaiting socket connections on 0.0.0.0:9092. (kafka.network.DataPlaneAcceptor)
[2024-05-21 17:30:58,756] INFO [BrokerServer id=1] Waiting for all of the authorizer futures to be completed (kafka.server.BrokerServer)
[2024-05-21 17:30:58,756] INFO [BrokerServer id=1] Finished waiting for all of the authorizer futures to be completed (kafka.server.BrokerServer)
[2024-05-21 17:30:58,756] INFO [BrokerServer id=1] Waiting for all of the SocketServer Acceptors to be started (kafka.server.BrokerServer)
[2024-05-21 17:30:58,756] INFO [BrokerServer id=1] Finished waiting for all of the SocketServer Acceptors to be started (kafka.server.BrokerServer)
[2024-05-21 17:30:58,756] INFO [BrokerServer id=1] Transition from STARTING to STARTED (kafka.server.BrokerServer)
[2024-05-21 17:30:58,757] INFO Kafka version: 3.7.0 (org.apache.kafka.common.utils.AppInfoParser)
[2024-05-21 17:30:58,757] INFO Kafka commitId: 2ae524ed625438c5 (org.apache.kafka.common.utils.AppInfoParser)
[2024-05-21 17:30:58,757] INFO Kafka startTimeMs: 1716312658757 (org.apache.kafka.common.utils.AppInfoParser)
[2024-05-21 17:30:58,758] INFO [KafkaRaftServer nodeId=1] Kafka Server started (kafka.server.KafkaRaftServer)

you should also see kafka is running from docker desktop

Now let's produce and consume a message! To produce a message, let's open a command terminal on the Kafka container:

$docker exec -it -w /opt/kafka/bin broker sh

Then create a topic:

$./kafka-topics.sh --create --topic my-topic --bootstrap-server broker:29092

The result of this command should be

Created topic my-topic.


Important
Take note of the --bootstrap-server flag. Because you're connecting to Kafka inside the container, you use broker:29092 for the host:port. If you were to use a client outside the container to connect to Kafka, a producer application running on your laptop for example, you'd use localhost:9092 instead.

Next, start a console producer with this command:

$./kafka-console-producer.sh  --topic my-topic --bootstrap-server broker:29092

At the prompt copy each line one at time and paste into the terminal hitting enter key after each one:

All streams
lead to Kafka

Then enter a CTRL-C to close the producer.

Now let's consume the messages with this command:

$./kafka-console-consumer.sh --topic my-topic --from-beginning --bootstrap-server broker:29092

And you should see the following:

All streams
lead to Kafka

Enter a CTRL-C to close the consumer and then type 

$exit 

to close the docker shell.

To shut down the container, run

$docker compose down -v
